/*
 * This source file was generated by the Gradle 'init' task
 */
package se.emilkronholm.pastaserver;

import java.net.ServerSocket;
import java.net.Socket;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;

class ConnectionTest {

    @Test
    void testGoodRequest() {
        String request = "GET / HTTP/1.1\r\n\r\n";
        performRequest(request);
    }

    private void performRequest(String request) {
        try (ServerSocket serverSocket = new ServerSocket(0)) {
            // Create a mock client on a new Thread to perform a mock request
            Thread clientThread = new Thread(() -> {
                try (Socket socket = new Socket("127.0.0.1", serverSocket.getLocalPort())) {

                    // Mock request
                    socket.getOutputStream().write(request.getBytes());
                    System.out.println("Client sent his request");

                    // Wait for response
                    System.out.println("Client is waiting for response");
                    byte[] buffer = new byte[1024];
                    int read = socket.getInputStream().read(buffer);
                    String response = new String(buffer, 0, read);

                    System.out.println("Client got his response. Will now perform tests");
                    // Perform some tests
                    // TODO: Once we have an custom HTTP parser we can perform more in depth-tests
                    assertTrue(!response.isBlank() && !response.isEmpty());
                    assertTrue(response.contains("HTTP/1.1"));
                    assertTrue(response.contains("200 OK"));
                } catch (Exception e) {

                    fail("Client failed due to exception: " + e.getMessage());
                }
            });
            clientThread.start();

            // In the real app, this is done in ConnectionManager
            System.out.println("Waiting for client...");
            Socket clientSocket = serverSocket.accept();
            System.out.println("Got client connection");
            // Once we have a request (or connection), we handle it.
            // HandleConnection will parse the request and send proper response.
            Connection.HandleConnection(clientSocket);

            clientThread.join();
        } catch (Exception e) {
            fail("Couldn't perform test because: " + e.getMessage());
        }
    }
}
